#!/usr/bin/python

import signal
import socket
import os
import sys
import errno
from subprocess import call

def main():
    if len(sys.argv) < 2:
        print("Expect container ID as first argument")
        return

    pid = sys.argv[1]
    sig = int(sys.argv[2]) if len(sys.argv) > 2 else signal.SIGTERM

    try:
        os.kill(int(pid), sig)
    except OSError as e:
        if errno.EPERM == e.errno:
            print("Permission denied killing process. Maybe try with [sudo]?")
            return
    except Exception as e:
        print(e)
        return

    edsIP = "localhost"
    edsPORT = 8007
    MESSAGE = "stop {}".format(pid) 
    MAX_DATA_SIZE = 4096

    srvsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    srvsock.settimeout(3) # 3 second timeout on commands
    srvsock.connect((edsIP, edsPORT))
    srvsock.sendall(MESSAGE)

    response = srvsock.recv(MAX_DATA_SIZE).split(" ")

    if response[0] != "OK":
        print(response[0])
    else:
        if os.path.exists("/sys/fs/cgroup/cpu/aucont-{}".format(pid)):
            call(["cgdelete", "cpu:aucont-{}".format(pid)])
        ns_id = response[1] 
        if ns_id != "-1": # remove net ns
            ns_name = 'aucontnet-{}'.format(ns_id)
            veth_name = "veth0-aucont-{}".format(ns_id)
            call(["ip", "netns", "delete", ns_name])
            call(["ip", "link", "delete", veth_name])
            srvsock.sendall("net_ns_deleted {}".format(ns_id))
    srvsock.close()

if __name__ == '__main__':
    main()