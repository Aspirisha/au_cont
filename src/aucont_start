#!/usr/bin/python

import sys
import os
import argparse
import re
import subprocess
import socket
import getpass

def get_aucont_binary_path(local_path):
    return os.path.join(os.path.dirname(os.path.realpath(__file__)), local_path)

def create_net_ns(ip):
    if not re.match("^((\d{1,3}\.){3})(\d{1,3})$", ip):
        print("Wrong ip")
        exit(1)

    for oct in ip.split("."):
        if int(oct) > 255:
            print("Ip octets should not exceed 255")
            exit(1)

    if ip.split(".")[-1] == 255:
        print("Ip should have last octet less than 255")
        exit(1)

    edsIP = "localhost"
    edsPORT = 8007
    MESSAGE = "new_net_id"
    MAX_DATA_SIZE = 4096

    srvsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    srvsock.settimeout(3) # 3 second timeout on commands
    srvsock.connect((edsIP, edsPORT))
    srvsock.sendall(MESSAGE)

    ns_id = srvsock.recv(MAX_DATA_SIZE) 
    srvsock.close()

    if ns_id == -1:
        print("Could not create new network namespace")
        exit(1)

    return "aucontnet-{}".format(ns_id)


def main():
    parser = argparse.ArgumentParser(description='Starts aucont container')
    parser.add_argument('-d', action='store_const', dest="is_daemon", const=1,
                        default=0, help='run container as daemon')
    parser.add_argument('--cpu', dest='cpu_perc',
                         type=int, default=100,
                        help='cpu percentage available for new container')
    parser.add_argument('--net', dest='ip',
                         type=str, help='put container into separate network' 
                         ' namespace and assign ip address to it', default="")
    parser.add_argument('fs_root',  metavar="FS_ROOT",
                    help='container file system root')
    parser.add_argument('cmd', type=str, 
                     help='Command to run in container')
    parser.add_argument('args', nargs='*',
                     help='Command arguments')
    args = parser.parse_args()
    
    if args.cpu_perc <= 0 or args.cpu_perc > 100:
        print("Cpu percentage should be between 1 and 100")
        exit(1)

    ns_id = -1
    command = ""
    if args.ip:
        ns_name = create_net_ns(args.ip)
        ns_id = ns_name.split("-")[1]
        user_name = getpass.getuser()

    args.fs_root = os.path.realpath(args.fs_root)

    path = get_aucont_binary_path("__aucont_start")
    command += "{} {} {} {} {} {} {}".format(path, args.is_daemon, args.cpu_perc, 
        ns_id, args.ip, args.fs_root, args.cmd)
    
    command_list = command.strip().split(" ")
    command_list.extend(args.args)
    if not args.is_daemon:
        subprocess.call(command_list)
    else:
        proc = subprocess.Popen(command_list)


if __name__ == '__main__':
    main()