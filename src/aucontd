#!/usr/bin/python

import os
import multiprocessing
import subprocess

from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.application import service
from multiprocessing import Lock
from twisted.python import log

class ContainerDescription:
    def __init__(self, pid, is_daemon, image_root, net_ns_id, cpu_perc):
        self.pid = pid
        self.is_daemon = is_daemon
        self.image_root = image_root
        self.net_ns_id = net_ns_id
        self.cpu_perc = cpu_perc

    def serialize(self):
        return "{} {} {} {} {}".format(self.pid, self.is_daemon, self.image_root, 
            self.net_ns_id, self.cpu_perc)


def get_aucont_binary_path(local_path):
    return os.path.join(os.path.dirname(os.path.realpath(__file__)), local_path)


def get_cpu_cgroup_path(cont_id):
    return "/sys/fs/cgroup/cpu/aucont/aucont-{}".format(cont_id)

class Server(Protocol):
    __MAX_NETWORK_ID = 1000
    def dataReceived(self, data):
        log.msg('Message received: ' + data)

        commands = data.split(' ')

        if commands[0] == "start":
            self.__on_start(commands)
        elif commands[0] == "exec":
            self.__on_exec(commands)
        elif commands[0] == "stop":
            self.__on_stop(commands)
        elif commands[0] == "list":
            self.transport.write(str(ServerFactory.running_containers.keys()))
        elif commands[0] == "describe":
            self.__on_describe(commands)
        elif commands[0] == "new_net_id":
            self.__on_new_net_id()

    def __on_start(self, commands):
        # start message format: 
        # start <pid> <is_daemon> <image_root> <net-ns>
        pid = int(commands[1])
        is_daemon = int(commands[2])
        img_root = commands[3]
        net_ns_id = int(commands[4])
        cpu_perc = int(commands[5])
        ip = commands[6]

        if cpu_perc > 0 and cpu_perc < 100:
            cgroup_dir = get_cpu_cgroup_path(pid)
            period = 1000000

            os.makedirs(cgroup_dir)
            with open(os.path.join(cgroup_dir, "cgroup.procs"), "w") as f:
                f.write("{}\n".format(pid))
            with open(os.path.join(cgroup_dir, "cpu.cfs_period_us"), "w") as f:
                f.write(str(period))
            with open(os.path.join(cgroup_dir, "cpu.cfs_quota_us"), "w") as f:
                f.write(str(period * cpu_perc * multiprocessing.cpu_count() / 100))

        if net_ns_id != -1:
            subprocess.call([get_aucont_binary_path("__setup_network.sh"), 
                "host", ip, str(net_ns_id), str(pid)])

        ServerFactory.running_containers[pid] = ContainerDescription(
            pid, is_daemon, img_root, net_ns_id, cpu_perc)
        self.transport.write("OK")
    

    def __on_stop(self, commands):
        # stop message format: 
        # stop <pid>
        if len(commands) < 2:
            self.transport.write("Container not specified")
            return

        if not commands[1].isdigit():
            self.transport.write("Container id should be digit")
            return

        pid = int(commands[1])
        if not pid in ServerFactory.running_containers.keys():
            self.transport.write("ERROR: Container with pid {} is not running".format(pid))
            return

        cont = ServerFactory.running_containers[pid]
        ServerFactory.running_containers.pop(pid)

        if cont.net_ns_id != -1:
            veth_name = "veth0-aucont-{}".format(cont.net_ns_id)
            subprocess.call(["ip", "link", "delete", veth_name])
            ServerFactory.used_network_ids.remove(cont.net_ns_id)

        self.transport.write("OK {}".format(cont.net_ns_id))
        

    def __on_describe(self, commands):
        # describe message format: 
        # describe <pid>
        cont_id = int(commands[1])
        if cont_id not in ServerFactory.running_containers.keys():
            self.transport.write("ERROR: Container with pid {} is not running".format(cont_id))
            return
        data = ServerFactory.running_containers[cont_id].serialize()
        self.transport.write(data)

    def __on_exec(self, commands):
        pid = int(commands[1])
        cont_id = int(commands[2])
        if cont_id not in ServerFactory.running_containers.keys():
            self.transport.write("ERROR: Container with pid {} is not running".format(pid))
            return
        cont = ServerFactory.running_containers[cont_id]

        if cont.cpu_perc < 100:
            cgroup_dir = get_cpu_cgroup_path(cont_id)
            with open(os.path.join(cgroup_dir, "cgroup.procs"), "a") as f:
                f.write("{}\n".format(pid))
        self.transport.write("OK")


    def __on_new_net_id(self):
        with ServerFactory.lock:
            netns_id = -1

            for i in range(Server.__MAX_NETWORK_ID):
                if i in ServerFactory.used_network_ids:
                    continue
                netns_id = i
                ServerFactory.used_network_ids.add(i)
                break
        self.transport.write(str(netns_id))


class ServerFactory(Factory):
    protocol = Server
    running_containers = {}
    used_network_ids = set()
    lock = Lock()

class EchoService(service.Service):
    
    def __init__(self, portNum):
        self.portNum = portNum

    def startService(self):
        self._port = reactor.listenTCP(self.portNum, ServerFactory())

    def stopService(self):
        return self._port.stopListening()


application = service.Application("Demo application")
service = EchoService(8007)
service.setServiceParent(application)
