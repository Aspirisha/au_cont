#!/usr/bin/python

from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.application import service

class Server(Protocol):
    def __init__(self):
        self.running_containers = set()

    def dataReceived(self, data):
        pid = int(data)
        self.running_containers.add(pid)
        self.transport.write(data)

class ServerFactory(Factory):
    protocol = Server

class EchoService(service.Service):
    def __init__(self, portNum):
        self.portNum = portNum

    def startService(self):
        self._port = reactor.listenTCP(self.portNum, ServerFactory())

    def stopService(self):
        return self._port.stopListening()


application = service.Application("Demo application")
service = EchoService(8007)
service.setServiceParent(application)

